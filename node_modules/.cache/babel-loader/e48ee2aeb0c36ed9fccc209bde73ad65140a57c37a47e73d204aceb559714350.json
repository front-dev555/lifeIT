{"ast":null,"code":"import { put,\n// SagaIterator,\ntakeEvery, select, call } from 'redux-saga/effects';\nimport { createOperationSuccessAction, createLoadingEndAction } from './actions';\nimport { ActionTypes } from './actionTypes';\nimport { makeOperation } from '../api';\nconst selectValue = state => state.value;\nfunction* handleIncrement() {\n  const currentValue = yield select(selectValue);\n  const result = yield call(makeOperation, currentValue, 1);\n  yield put(createOperationSuccessAction(result));\n  yield put(createLoadingEndAction());\n}\nfunction* handleDecrement() {\n  const currentValue = yield select(selectValue);\n  const result = yield call(makeOperation, currentValue, -1);\n  yield put(createOperationSuccessAction(result));\n  yield put(createLoadingEndAction());\n}\nfunction* handleIncrementByValue(action) {\n  const currentValue = yield select(selectValue);\n  const result = yield call(makeOperation, currentValue, action.payload);\n  yield put(createOperationSuccessAction(result));\n  yield put(createLoadingEndAction());\n}\nfunction* handleDecrementByValue(action) {\n  const currentValue = yield select(selectValue);\n  const result = yield call(makeOperation, currentValue, -action.payload);\n  yield put(createOperationSuccessAction(result));\n  yield put(createLoadingEndAction());\n}\nexport function* rootSaga() {\n  yield takeEvery(ActionTypes.INCREMENT_ASYNC, handleIncrement);\n  yield takeEvery(ActionTypes.DECREMENT_ASYNC, handleDecrement);\n  yield takeEvery(ActionTypes.INCREMENT_BY_VALUE_ASYNC, handleIncrementByValue);\n  yield takeEvery(ActionTypes.DECREMENT_BY_VALUE_ASYNC, handleDecrementByValue);\n}","map":{"version":3,"names":["put","takeEvery","select","call","createOperationSuccessAction","createLoadingEndAction","ActionTypes","makeOperation","selectValue","state","value","handleIncrement","currentValue","result","handleDecrement","handleIncrementByValue","action","payload","handleDecrementByValue","rootSaga","INCREMENT_ASYNC","DECREMENT_ASYNC","INCREMENT_BY_VALUE_ASYNC","DECREMENT_BY_VALUE_ASYNC"],"sources":["/Users/donpindyukel/Downloads/test-project/src/ducks/sagas.ts"],"sourcesContent":["import {\n  put,\n  take,\n  SagaReturnType,\n  // SagaIterator,\n  takeEvery,\n  race,\n  fork,\n  ForkEffect,\n  select,\n  call,\n  SelectEffect,\n  CallEffect,\n  PutEffect,\n} from 'redux-saga/effects';\nimport {\n  createOperationSuccessAction,\n  createIncrementByValueAction,\n  createDecrementByValueAction,\n  createLoadingEndAction,\n  AppAction\n} from './actions';\nimport { ActionTypes } from './actionTypes';\nimport { makeOperation } from '../api';\nimport { AppState } from './types';\n\ntype SagaEffect =\n  | SelectEffect\n  | CallEffect<number>\n  | PutEffect<AppAction>;\n\nconst selectValue: (state: AppState) => number = (state) => state.value;\n\nfunction* handleIncrement(): Generator<SagaEffect, void, number> {\n  const currentValue = yield select(selectValue);\n  const result = yield call(makeOperation, currentValue, 1);\n  yield put(createOperationSuccessAction(result));\n  yield put(createLoadingEndAction());\n}\n\nfunction* handleDecrement(): Generator<SagaEffect, void, number> {\n  const currentValue = yield select(selectValue);\n  const result = yield call(makeOperation, currentValue, -1);\n  yield put(createOperationSuccessAction(result));\n  yield put(createLoadingEndAction());\n}\n\nfunction* handleIncrementByValue(action: ReturnType<typeof createIncrementByValueAction>): Generator<SagaEffect, void, number> {\n  const currentValue = yield select(selectValue);\n  const result = yield call(makeOperation, currentValue, action.payload);\n  yield put(createOperationSuccessAction(result));\n  yield put(createLoadingEndAction());\n}\n\nfunction* handleDecrementByValue(action: ReturnType<typeof createDecrementByValueAction>): Generator<SagaEffect, void, number> {\n  const currentValue = yield select(selectValue);\n  const result = yield call(makeOperation, currentValue, -action.payload);\n  yield put(createOperationSuccessAction(result));\n  yield put(createLoadingEndAction());\n}\n\nexport function* rootSaga() {\n  yield takeEvery(ActionTypes.INCREMENT_ASYNC, handleIncrement);\n  yield takeEvery(ActionTypes.DECREMENT_ASYNC, handleDecrement);\n  yield takeEvery(ActionTypes.INCREMENT_BY_VALUE_ASYNC, handleIncrementByValue);\n  yield takeEvery(ActionTypes.DECREMENT_BY_VALUE_ASYNC, handleDecrementByValue);\n}\n"],"mappings":"AAAA,SACEA,GAAG;AAGH;AACAC,SAAS,EAITC,MAAM,EACNC,IAAI,QAIC,oBAAoB;AAC3B,SACEC,4BAA4B,EAG5BC,sBAAsB,QAEjB,WAAW;AAClB,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,aAAa,QAAQ,QAAQ;AAQtC,MAAMC,WAAwC,GAAIC,KAAK,IAAKA,KAAK,CAACC,KAAK;AAEvE,UAAUC,eAAeA,CAAA,EAAwC;EAC/D,MAAMC,YAAY,GAAG,MAAMV,MAAM,CAACM,WAAW,CAAC;EAC9C,MAAMK,MAAM,GAAG,MAAMV,IAAI,CAACI,aAAa,EAAEK,YAAY,EAAE,CAAC,CAAC;EACzD,MAAMZ,GAAG,CAACI,4BAA4B,CAACS,MAAM,CAAC,CAAC;EAC/C,MAAMb,GAAG,CAACK,sBAAsB,CAAC,CAAC,CAAC;AACrC;AAEA,UAAUS,eAAeA,CAAA,EAAwC;EAC/D,MAAMF,YAAY,GAAG,MAAMV,MAAM,CAACM,WAAW,CAAC;EAC9C,MAAMK,MAAM,GAAG,MAAMV,IAAI,CAACI,aAAa,EAAEK,YAAY,EAAE,CAAC,CAAC,CAAC;EAC1D,MAAMZ,GAAG,CAACI,4BAA4B,CAACS,MAAM,CAAC,CAAC;EAC/C,MAAMb,GAAG,CAACK,sBAAsB,CAAC,CAAC,CAAC;AACrC;AAEA,UAAUU,sBAAsBA,CAACC,MAAuD,EAAuC;EAC7H,MAAMJ,YAAY,GAAG,MAAMV,MAAM,CAACM,WAAW,CAAC;EAC9C,MAAMK,MAAM,GAAG,MAAMV,IAAI,CAACI,aAAa,EAAEK,YAAY,EAAEI,MAAM,CAACC,OAAO,CAAC;EACtE,MAAMjB,GAAG,CAACI,4BAA4B,CAACS,MAAM,CAAC,CAAC;EAC/C,MAAMb,GAAG,CAACK,sBAAsB,CAAC,CAAC,CAAC;AACrC;AAEA,UAAUa,sBAAsBA,CAACF,MAAuD,EAAuC;EAC7H,MAAMJ,YAAY,GAAG,MAAMV,MAAM,CAACM,WAAW,CAAC;EAC9C,MAAMK,MAAM,GAAG,MAAMV,IAAI,CAACI,aAAa,EAAEK,YAAY,EAAE,CAACI,MAAM,CAACC,OAAO,CAAC;EACvE,MAAMjB,GAAG,CAACI,4BAA4B,CAACS,MAAM,CAAC,CAAC;EAC/C,MAAMb,GAAG,CAACK,sBAAsB,CAAC,CAAC,CAAC;AACrC;AAEA,OAAO,UAAUc,QAAQA,CAAA,EAAG;EAC1B,MAAMlB,SAAS,CAACK,WAAW,CAACc,eAAe,EAAET,eAAe,CAAC;EAC7D,MAAMV,SAAS,CAACK,WAAW,CAACe,eAAe,EAAEP,eAAe,CAAC;EAC7D,MAAMb,SAAS,CAACK,WAAW,CAACgB,wBAAwB,EAAEP,sBAAsB,CAAC;EAC7E,MAAMd,SAAS,CAACK,WAAW,CAACiB,wBAAwB,EAAEL,sBAAsB,CAAC;AAC/E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}