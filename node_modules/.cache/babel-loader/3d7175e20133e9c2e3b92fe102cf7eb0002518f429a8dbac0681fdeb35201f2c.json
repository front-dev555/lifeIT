{"ast":null,"code":"export const createStore = (reducer, enhancer) => {\n  if (enhancer) {\n    return enhancer(createStore)(reducer);\n  }\n  let currentState = reducer(undefined, {});\n  let currentListeners = new Set();\n  let isDispatching = false;\n  return {\n    getState: () => currentState,\n    dispatch: action => {\n      if (isDispatching) {\n        throw new Error('Reducers may not dispatch actions.');\n      }\n      try {\n        isDispatching = true;\n        currentState = reducer(currentState, action);\n      } finally {\n        isDispatching = false;\n      }\n      currentListeners.forEach(listener => listener());\n      return action;\n    },\n    subscribe: listener => {\n      currentListeners.add(listener);\n      return () => {\n        currentListeners.delete(listener);\n      };\n    }\n  };\n};","map":{"version":3,"names":["createStore","reducer","enhancer","currentState","undefined","currentListeners","Set","isDispatching","getState","dispatch","action","Error","forEach","listener","subscribe","add","delete"],"sources":["/Users/donpindyukel/Downloads/test-project/src/quax/createStore.ts"],"sourcesContent":["import { Store, StoreEnhancer } from './types';\nimport { AppAction } from '../ducks/actions';\nimport { AppState } from '../ducks/types';\n\nexport const createStore = <S = AppState, A = AppAction>(\n  reducer: (state: S | undefined, action: A) => S,\n  enhancer?: StoreEnhancer<S, A>\n): Store<S, A> => {\n  if (enhancer) {\n    return enhancer(createStore)(reducer);\n  }\n\n  let currentState = reducer(undefined, {} as A);\n  let currentListeners = new Set<() => void>();\n  let isDispatching = false;\n\n  return {\n    getState: () => currentState,\n\n    dispatch: (action: A) => {\n      if (isDispatching) {\n        throw new Error('Reducers may not dispatch actions.');\n      }\n\n      try {\n        isDispatching = true;\n        currentState = reducer(currentState, action);\n      } finally {\n        isDispatching = false;\n      }\n\n      currentListeners.forEach(listener => listener());\n      return action;\n    },\n\n    subscribe: (listener: () => void) => {\n      currentListeners.add(listener);\n      return () => {\n        currentListeners.delete(listener);\n      };\n    }\n  };\n};\n"],"mappings":"AAIA,OAAO,MAAMA,WAAW,GAAGA,CACzBC,OAA+C,EAC/CC,QAA8B,KACd;EAChB,IAAIA,QAAQ,EAAE;IACZ,OAAOA,QAAQ,CAACF,WAAW,CAAC,CAACC,OAAO,CAAC;EACvC;EAEA,IAAIE,YAAY,GAAGF,OAAO,CAACG,SAAS,EAAE,CAAC,CAAM,CAAC;EAC9C,IAAIC,gBAAgB,GAAG,IAAIC,GAAG,CAAa,CAAC;EAC5C,IAAIC,aAAa,GAAG,KAAK;EAEzB,OAAO;IACLC,QAAQ,EAAEA,CAAA,KAAML,YAAY;IAE5BM,QAAQ,EAAGC,MAAS,IAAK;MACvB,IAAIH,aAAa,EAAE;QACjB,MAAM,IAAII,KAAK,CAAC,oCAAoC,CAAC;MACvD;MAEA,IAAI;QACFJ,aAAa,GAAG,IAAI;QACpBJ,YAAY,GAAGF,OAAO,CAACE,YAAY,EAAEO,MAAM,CAAC;MAC9C,CAAC,SAAS;QACRH,aAAa,GAAG,KAAK;MACvB;MAEAF,gBAAgB,CAACO,OAAO,CAACC,QAAQ,IAAIA,QAAQ,CAAC,CAAC,CAAC;MAChD,OAAOH,MAAM;IACf,CAAC;IAEDI,SAAS,EAAGD,QAAoB,IAAK;MACnCR,gBAAgB,CAACU,GAAG,CAACF,QAAQ,CAAC;MAC9B,OAAO,MAAM;QACXR,gBAAgB,CAACW,MAAM,CAACH,QAAQ,CAAC;MACnC,CAAC;IACH;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}