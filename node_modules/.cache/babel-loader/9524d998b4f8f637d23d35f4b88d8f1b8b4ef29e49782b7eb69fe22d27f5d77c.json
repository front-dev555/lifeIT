{"ast":null,"code":"export {};","map":{"version":3,"names":[],"sources":["/Users/donpindyukel/Downloads/test-project/src/quax/types.ts"],"sourcesContent":["import { Effect } from 'redux-saga/effects';\nimport { AppState } from '../ducks/types';\nimport { AppAction } from '../ducks/actions';\n\nexport interface Store<S = AppState, A = AppAction> {\n  getState(): S;\n  dispatch(action: A): A;\n  subscribe(listener: () => void): () => void;\n}\n\nexport interface StoreEnhancer<S = AppState, A = AppAction> {\n  (createStore: StoreCreator<S, A>): StoreCreator<S, A>;\n}\n\nexport type StoreCreator<S = AppState, A = AppAction> = (\n  reducer: (state: S | undefined, action: A) => S,\n  enhancer?: StoreEnhancer<S, A>\n) => Store<S, A>;\n\nexport interface MiddlewareAPI<S = AppState, A = AppAction> {\n  dispatch: (action: A) => A;\n  getState: () => S;\n}\n\nexport type Dispatch<A = AppAction> = (action: A) => A;\n\nexport type Middleware<S = AppState, A = AppAction> = (\n  api: MiddlewareAPI<S, A>\n) => (next: Dispatch<A>) => Dispatch<A>;\n\nexport type SagaMiddleware<S = AppState> = Middleware<S, AppAction> & {\n  run: (saga: () => Generator<Effect, void, unknown>) => void;\n};\n\nexport type UnknownAction = { type: string };\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}