{"ast":null,"code":"import { put, takeEvery, select, call, cancelled, fork, cancel } from 'redux-saga/effects';\nimport { createOperationSuccessAction, createLoadingEndAction } from './actions';\nimport { ActionTypes } from './actionTypes';\nimport { makeOperation } from '../api';\nconst selectValue = state => state.value;\nlet currentTask = null;\nfunction* handleOperation(currentValue, delta) {\n  try {\n    const result = yield call(makeOperation, currentValue, delta);\n    yield put(createOperationSuccessAction(result));\n  } finally {\n    if (yield cancelled()) {\n      console.log('Operation was cancelled');\n    }\n    yield put(createLoadingEndAction());\n    currentTask = null;\n  }\n}\nfunction* handleIncrement() {\n  const currentValue = yield select(selectValue);\n  if (currentTask) {\n    yield cancel(currentTask);\n  }\n  currentTask = yield fork(handleOperation, currentValue, 1);\n}\nfunction* handleDecrement() {\n  const currentValue = yield select(selectValue);\n  if (currentTask) {\n    yield cancel(currentTask);\n  }\n  currentTask = yield fork(handleOperation, currentValue, -1);\n}\nfunction* handleIncrementByValue(action) {\n  const currentValue = yield select(selectValue);\n  if (currentTask) {\n    yield cancel(currentTask);\n  }\n  currentTask = yield fork(handleOperation, currentValue, action.payload);\n}\nfunction* handleDecrementByValue(action) {\n  const currentValue = yield select(selectValue);\n  if (currentTask) {\n    yield cancel(currentTask);\n  }\n  currentTask = yield fork(handleOperation, currentValue, -action.payload);\n}\nfunction* handleCancelOperation() {\n  if (currentTask) {\n    yield cancel(currentTask);\n    currentTask = null;\n  }\n  yield put(createLoadingEndAction());\n}\nexport function* rootSaga() {\n  yield takeEvery(ActionTypes.INCREMENT_ASYNC, handleIncrement);\n  yield takeEvery(ActionTypes.DECREMENT_ASYNC, handleDecrement);\n  yield takeEvery(ActionTypes.INCREMENT_BY_VALUE_ASYNC, handleIncrementByValue);\n  yield takeEvery(ActionTypes.DECREMENT_BY_VALUE_ASYNC, handleDecrementByValue);\n  yield takeEvery(ActionTypes.CANCEL_ALL_OPERATIONS, handleCancelOperation);\n}","map":{"version":3,"names":["put","takeEvery","select","call","cancelled","fork","cancel","createOperationSuccessAction","createLoadingEndAction","ActionTypes","makeOperation","selectValue","state","value","currentTask","handleOperation","currentValue","delta","result","console","log","handleIncrement","handleDecrement","handleIncrementByValue","action","payload","handleDecrementByValue","handleCancelOperation","rootSaga","INCREMENT_ASYNC","DECREMENT_ASYNC","INCREMENT_BY_VALUE_ASYNC","DECREMENT_BY_VALUE_ASYNC","CANCEL_ALL_OPERATIONS"],"sources":["/Users/donpindyukel/Downloads/test-project/src/ducks/sagas.ts"],"sourcesContent":["import {\n  put,\n  takeEvery,\n  select,\n  call,\n  SelectEffect,\n  CallEffect,\n  PutEffect,\n  cancelled,\n  CancelledEffect,\n  take,\n  TakeEffect,\n  fork,\n  ForkEffect,\n  cancel,\n  CancelEffect,\n} from 'redux-saga/effects';\nimport {\n  createOperationSuccessAction,\n  createIncrementByValueAction,\n  createDecrementByValueAction,\n  createLoadingEndAction,\n  AppAction,\n} from './actions';\nimport { ActionTypes } from './actionTypes';\nimport { makeOperation } from '../api';\nimport { AppState } from './types';\n\ntype SagaEffect =\n  | SelectEffect\n  | CallEffect<number>\n  | CallEffect<void>\n  | PutEffect<AppAction>\n  | CancelledEffect\n  | TakeEffect\n  | ForkEffect\n  | CancelEffect;\n\nconst selectValue: (state: AppState) => number = (state) => state.value;\n\nlet currentTask: ReturnType<typeof fork> | null = null;\n\nfunction* handleOperation(\n  currentValue: number,\n  delta: number\n): Generator<SagaEffect, void, number> {\n  try {\n    const result = yield call(makeOperation, currentValue, delta);\n    yield put(createOperationSuccessAction(result));\n  } finally {\n    if (yield cancelled()) {\n      console.log('Operation was cancelled');\n    }\n    yield put(createLoadingEndAction());\n    currentTask = null;\n  }\n}\n\nfunction* handleIncrement(): Generator<SagaEffect, void, number> {\n  const currentValue = yield select(selectValue);\n  if (currentTask) {\n    yield cancel(currentTask);\n  }\n  currentTask = yield fork(handleOperation, currentValue, 1);\n}\n\nfunction* handleDecrement(): Generator<SagaEffect, void, number> {\n  const currentValue = yield select(selectValue);\n  if (currentTask) {\n    yield cancel(currentTask);\n  }\n  currentTask = yield fork(handleOperation, currentValue, -1);\n}\n\nfunction* handleIncrementByValue(\n  action: ReturnType<typeof createIncrementByValueAction>\n): Generator<SagaEffect, void, number> {\n  const currentValue = yield select(selectValue);\n  if (currentTask) {\n    yield cancel(currentTask);\n  }\n  currentTask = yield fork(handleOperation, currentValue, action.payload);\n}\n\nfunction* handleDecrementByValue(\n  action: ReturnType<typeof createDecrementByValueAction>\n): Generator<SagaEffect, void, number> {\n  const currentValue = yield select(selectValue);\n  if (currentTask) {\n    yield cancel(currentTask);\n  }\n  currentTask = yield fork(handleOperation, currentValue, -action.payload);\n}\n\nfunction* handleCancelOperation(): Generator<SagaEffect, void, number> {\n  if (currentTask) {\n    yield cancel(currentTask);\n    currentTask = null;\n  }\n  yield put(createLoadingEndAction());\n}\n\nexport function* rootSaga() {\n  yield takeEvery(ActionTypes.INCREMENT_ASYNC, handleIncrement);\n  yield takeEvery(ActionTypes.DECREMENT_ASYNC, handleDecrement);\n  yield takeEvery(ActionTypes.INCREMENT_BY_VALUE_ASYNC, handleIncrementByValue);\n  yield takeEvery(ActionTypes.DECREMENT_BY_VALUE_ASYNC, handleDecrementByValue);\n  yield takeEvery(ActionTypes.CANCEL_ALL_OPERATIONS, handleCancelOperation);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}