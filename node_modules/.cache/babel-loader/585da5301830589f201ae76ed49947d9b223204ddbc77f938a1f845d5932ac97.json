{"ast":null,"code":"import { put, takeLatest, select, call, cancelled, take, race } from 'redux-saga/effects';\nimport { createOperationSuccessAction, createLoadingEndAction } from './actions';\nimport { ActionTypes } from './actionTypes';\nimport { makeOperation } from '../api';\nconst selectValue = state => state.value;\nfunction* handleOperation(currentValue, delta) {\n  try {\n    const result = yield call(makeOperation, currentValue, delta);\n    yield put(createOperationSuccessAction(result));\n  } finally {\n    if (yield cancelled()) {\n      console.log('Operation was cancelled');\n    }\n    yield put(createLoadingEndAction());\n  }\n}\nfunction* handleIncrement() {\n  const currentValue = yield select(selectValue);\n  yield race({\n    operation: call(handleOperation, currentValue, 1),\n    cancel: take(ActionTypes.CANCEL_ALL_OPERATIONS)\n  });\n}\nfunction* handleDecrement() {\n  const currentValue = yield select(selectValue);\n  yield race({\n    operation: call(handleOperation, currentValue, -1),\n    cancel: take(ActionTypes.CANCEL_ALL_OPERATIONS)\n  });\n}\nfunction* handleIncrementByValue(action) {\n  const currentValue = yield select(selectValue);\n  yield race({\n    operation: call(handleOperation, currentValue, action.payload),\n    cancel: take(ActionTypes.CANCEL_ALL_OPERATIONS)\n  });\n}\nfunction* handleDecrementByValue(action) {\n  const currentValue = yield select(selectValue);\n  yield race({\n    operation: call(handleOperation, currentValue, -action.payload),\n    cancel: take(ActionTypes.CANCEL_ALL_OPERATIONS)\n  });\n}\nfunction* handleCancelOperation() {\n  yield put(createLoadingEndAction());\n}\nexport function* rootSaga() {\n  yield takeLatest(ActionTypes.INCREMENT_ASYNC, handleIncrement);\n  yield takeLatest(ActionTypes.DECREMENT_ASYNC, handleDecrement);\n  yield takeLatest(ActionTypes.INCREMENT_BY_VALUE_ASYNC, handleIncrementByValue);\n  yield takeLatest(ActionTypes.DECREMENT_BY_VALUE_ASYNC, handleDecrementByValue);\n  yield takeLatest(ActionTypes.CANCEL_ALL_OPERATIONS, handleCancelOperation);\n}","map":{"version":3,"names":["put","takeLatest","select","call","cancelled","take","race","createOperationSuccessAction","createLoadingEndAction","ActionTypes","makeOperation","selectValue","state","value","handleOperation","currentValue","delta","result","console","log","handleIncrement","operation","cancel","CANCEL_ALL_OPERATIONS","handleDecrement","handleIncrementByValue","action","payload","handleDecrementByValue","handleCancelOperation","rootSaga","INCREMENT_ASYNC","DECREMENT_ASYNC","INCREMENT_BY_VALUE_ASYNC","DECREMENT_BY_VALUE_ASYNC"],"sources":["/Users/donpindyukel/Downloads/test-project/src/ducks/sagas.ts"],"sourcesContent":["import {\n  put,\n  takeLatest,\n  select,\n  call,\n  SelectEffect,\n  CallEffect,\n  PutEffect,\n  cancelled,\n  CancelledEffect,\n  take,\n  TakeEffect,\n  race,\n  RaceEffect,\n} from 'redux-saga/effects';\nimport {\n  createOperationSuccessAction,\n  createIncrementByValueAction,\n  createDecrementByValueAction,\n  createLoadingEndAction,\n  AppAction,\n} from './actions';\nimport { ActionTypes } from './actionTypes';\nimport { makeOperation } from '../api';\nimport { AppState } from './types';\n\ntype SagaEffect =\n  | SelectEffect\n  | CallEffect<number>\n  | CallEffect<void>\n  | PutEffect<AppAction>\n  | CancelledEffect\n  | TakeEffect\n  | RaceEffect<{\n      operation: CallEffect<number>;\n      cancel: TakeEffect;\n    }>;\n\nconst selectValue: (state: AppState) => number = (state) => state.value;\n\nfunction* handleOperation(\n  currentValue: number,\n  delta: number\n): Generator<SagaEffect, void, number> {\n  try {\n    const result = yield call(makeOperation, currentValue, delta);\n    yield put(createOperationSuccessAction(result));\n  } finally {\n    if (yield cancelled()) {\n      console.log('Operation was cancelled');\n    }\n    yield put(createLoadingEndAction());\n  }\n}\n\nfunction* handleIncrement(): Generator<SagaEffect, void, number> {\n  const currentValue = yield select(selectValue);\n  yield race({\n    operation: call(handleOperation, currentValue, 1),\n    cancel: take(ActionTypes.CANCEL_ALL_OPERATIONS)\n  });\n}\n\nfunction* handleDecrement(): Generator<SagaEffect, void, number> {\n  const currentValue = yield select(selectValue);\n  yield race({\n    operation: call(handleOperation, currentValue, -1),\n    cancel: take(ActionTypes.CANCEL_ALL_OPERATIONS)\n  });\n}\n\nfunction* handleIncrementByValue(\n  action: ReturnType<typeof createIncrementByValueAction>\n): Generator<SagaEffect, void, number> {\n  const currentValue = yield select(selectValue);\n  yield race({\n    operation: call(handleOperation, currentValue, action.payload),\n    cancel: take(ActionTypes.CANCEL_ALL_OPERATIONS)\n  });\n}\n\nfunction* handleDecrementByValue(\n  action: ReturnType<typeof createDecrementByValueAction>\n): Generator<SagaEffect, void, number> {\n  const currentValue = yield select(selectValue);\n  yield race({\n    operation: call(handleOperation, currentValue, -action.payload),\n    cancel: take(ActionTypes.CANCEL_ALL_OPERATIONS)\n  });\n}\n\nfunction* handleCancelOperation(): Generator<SagaEffect, void, number> {\n  yield put(createLoadingEndAction());\n}\n\nexport function* rootSaga() {\n  yield takeLatest(ActionTypes.INCREMENT_ASYNC, handleIncrement);\n  yield takeLatest(ActionTypes.DECREMENT_ASYNC, handleDecrement);\n  yield takeLatest(ActionTypes.INCREMENT_BY_VALUE_ASYNC, handleIncrementByValue);\n  yield takeLatest(ActionTypes.DECREMENT_BY_VALUE_ASYNC, handleDecrementByValue);\n  yield takeLatest(ActionTypes.CANCEL_ALL_OPERATIONS, handleCancelOperation);\n}\n"],"mappings":"AAAA,SACEA,GAAG,EACHC,UAAU,EACVC,MAAM,EACNC,IAAI,EAIJC,SAAS,EAETC,IAAI,EAEJC,IAAI,QAEC,oBAAoB;AAC3B,SACEC,4BAA4B,EAG5BC,sBAAsB,QAEjB,WAAW;AAClB,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,aAAa,QAAQ,QAAQ;AAetC,MAAMC,WAAwC,GAAIC,KAAK,IAAKA,KAAK,CAACC,KAAK;AAEvE,UAAUC,eAAeA,CACvBC,YAAoB,EACpBC,KAAa,EACwB;EACrC,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMd,IAAI,CAACO,aAAa,EAAEK,YAAY,EAAEC,KAAK,CAAC;IAC7D,MAAMhB,GAAG,CAACO,4BAA4B,CAACU,MAAM,CAAC,CAAC;EACjD,CAAC,SAAS;IACR,IAAI,MAAMb,SAAS,CAAC,CAAC,EAAE;MACrBc,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACxC;IACA,MAAMnB,GAAG,CAACQ,sBAAsB,CAAC,CAAC,CAAC;EACrC;AACF;AAEA,UAAUY,eAAeA,CAAA,EAAwC;EAC/D,MAAML,YAAY,GAAG,MAAMb,MAAM,CAACS,WAAW,CAAC;EAC9C,MAAML,IAAI,CAAC;IACTe,SAAS,EAAElB,IAAI,CAACW,eAAe,EAAEC,YAAY,EAAE,CAAC,CAAC;IACjDO,MAAM,EAAEjB,IAAI,CAACI,WAAW,CAACc,qBAAqB;EAChD,CAAC,CAAC;AACJ;AAEA,UAAUC,eAAeA,CAAA,EAAwC;EAC/D,MAAMT,YAAY,GAAG,MAAMb,MAAM,CAACS,WAAW,CAAC;EAC9C,MAAML,IAAI,CAAC;IACTe,SAAS,EAAElB,IAAI,CAACW,eAAe,EAAEC,YAAY,EAAE,CAAC,CAAC,CAAC;IAClDO,MAAM,EAAEjB,IAAI,CAACI,WAAW,CAACc,qBAAqB;EAChD,CAAC,CAAC;AACJ;AAEA,UAAUE,sBAAsBA,CAC9BC,MAAuD,EAClB;EACrC,MAAMX,YAAY,GAAG,MAAMb,MAAM,CAACS,WAAW,CAAC;EAC9C,MAAML,IAAI,CAAC;IACTe,SAAS,EAAElB,IAAI,CAACW,eAAe,EAAEC,YAAY,EAAEW,MAAM,CAACC,OAAO,CAAC;IAC9DL,MAAM,EAAEjB,IAAI,CAACI,WAAW,CAACc,qBAAqB;EAChD,CAAC,CAAC;AACJ;AAEA,UAAUK,sBAAsBA,CAC9BF,MAAuD,EAClB;EACrC,MAAMX,YAAY,GAAG,MAAMb,MAAM,CAACS,WAAW,CAAC;EAC9C,MAAML,IAAI,CAAC;IACTe,SAAS,EAAElB,IAAI,CAACW,eAAe,EAAEC,YAAY,EAAE,CAACW,MAAM,CAACC,OAAO,CAAC;IAC/DL,MAAM,EAAEjB,IAAI,CAACI,WAAW,CAACc,qBAAqB;EAChD,CAAC,CAAC;AACJ;AAEA,UAAUM,qBAAqBA,CAAA,EAAwC;EACrE,MAAM7B,GAAG,CAACQ,sBAAsB,CAAC,CAAC,CAAC;AACrC;AAEA,OAAO,UAAUsB,QAAQA,CAAA,EAAG;EAC1B,MAAM7B,UAAU,CAACQ,WAAW,CAACsB,eAAe,EAAEX,eAAe,CAAC;EAC9D,MAAMnB,UAAU,CAACQ,WAAW,CAACuB,eAAe,EAAER,eAAe,CAAC;EAC9D,MAAMvB,UAAU,CAACQ,WAAW,CAACwB,wBAAwB,EAAER,sBAAsB,CAAC;EAC9E,MAAMxB,UAAU,CAACQ,WAAW,CAACyB,wBAAwB,EAAEN,sBAAsB,CAAC;EAC9E,MAAM3B,UAAU,CAACQ,WAAW,CAACc,qBAAqB,EAAEM,qBAAqB,CAAC;AAC5E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}